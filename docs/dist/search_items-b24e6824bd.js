searchNodes=[{"ref":"FootbalInterface.Formatter.html","title":"FootbalInterface.Formatter","type":"module","doc":"Contains the logic to convert messages into the various protocols supported. Currently supports JSON and Google&#39;s Protocol Buffer."},{"ref":"FootbalInterface.Formatter.html#format/2","title":"FootbalInterface.Formatter.format/2","type":"function","doc":"Receives a list of results and converts it to either JSON or protobuf. Arguments: results: the list of results from a DB query. format: the format to convert to. Returns: {:ok, result}: Tagged :ok tuple with the result in binary. {:error, :invalid_format, inv_format}: if the requested format is not supported. inv_format is the invalid format. {:error, :json_encoding_failed, err}: if converting the data to JSON failed. err is the error raised. {:error, :protobuff_encoding_failed, err}: if converting the data to protobuff failed. err is the error raised."},{"ref":"FootbalInterface.Messages.html","title":"FootbalInterface.Messages","type":"module","doc":"Contains all the .proto schemas for Google&#39;s protool buffer format."},{"ref":"FootbalInterface.Messages.html#defs/0","title":"FootbalInterface.Messages.defs/0","type":"function","doc":""},{"ref":"FootbalInterface.Web.Controllers.NotFound.html","title":"FootbalInterface.Web.Controllers.NotFound","type":"module","doc":"Runs when no URL matches."},{"ref":"FootbalInterface.Web.Controllers.NotFound.html#process/1","title":"FootbalInterface.Web.Controllers.NotFound.process/1","type":"function","doc":""},{"ref":"FootbalInterface.Web.Controllers.Ping.html","title":"FootbalInterface.Web.Controllers.Ping","type":"module","doc":"Basic ping controller which will always return 200. Used periodically to check if the server is alive."},{"ref":"FootbalInterface.Web.Controllers.Ping.html#process/1","title":"FootbalInterface.Web.Controllers.Ping.process/1","type":"function","doc":""},{"ref":"FootbalInterface.Web.Controllers.Search.html","title":"FootbalInterface.Web.Controllers.Search","type":"module","doc":"Maps the results of the search query made to HTTP and sends the response to the client."},{"ref":"FootbalInterface.Web.Controllers.Search.html#process/2","title":"FootbalInterface.Web.Controllers.Search.process/2","type":"function","doc":""},{"ref":"FootbalInterface.Web.Plugs.MetricsExporter.html","title":"FootbalInterface.Web.Plugs.MetricsExporter","type":"module","doc":"Exposes the /metrics path and responds in Prometheus metrics format. See used Prometheus.PlugExporter module for details."},{"ref":"FootbalInterface.Web.Plugs.MetricsExporter.html#call/2","title":"FootbalInterface.Web.Plugs.MetricsExporter.call/2","type":"function","doc":"Callback implementation for Plug.call/2."},{"ref":"FootbalInterface.Web.Plugs.MetricsExporter.html#init/1","title":"FootbalInterface.Web.Plugs.MetricsExporter.init/1","type":"function","doc":"Callback implementation for Plug.init/1."},{"ref":"FootbalInterface.Web.Plugs.MetricsExporter.html#setup/0","title":"FootbalInterface.Web.Plugs.MetricsExporter.setup/0","type":"function","doc":""},{"ref":"FootbalInterface.Web.Plugs.MetricsInstrumenter.html","title":"FootbalInterface.Web.Plugs.MetricsInstrumenter","type":"module","doc":"Adds HTTP related metrics for every request. See used Prometheus.PlugPipelineInstrumenter module for details."},{"ref":"FootbalInterface.Web.Plugs.MetricsInstrumenter.html#call/2","title":"FootbalInterface.Web.Plugs.MetricsInstrumenter.call/2","type":"function","doc":"Callback implementation for Plug.call/2."},{"ref":"FootbalInterface.Web.Plugs.MetricsInstrumenter.html#init/1","title":"FootbalInterface.Web.Plugs.MetricsInstrumenter.init/1","type":"function","doc":"Callback implementation for Plug.init/1."},{"ref":"FootbalInterface.Web.Plugs.MetricsInstrumenter.html#setup/0","title":"FootbalInterface.Web.Plugs.MetricsInstrumenter.setup/0","type":"function","doc":""},{"ref":"FootbalInterface.Web.Router.html","title":"FootbalInterface.Web.Router","type":"module","doc":"Plug Router for all incoming requests. Feeds the metrics modules with data and dispatches the requests to the correct controllers after."},{"ref":"FootbalInterface.Web.Router.html#call/2","title":"FootbalInterface.Web.Router.call/2","type":"function","doc":"Callback implementation for Plug.call/2."},{"ref":"FootbalInterface.Web.Router.html#init/1","title":"FootbalInterface.Web.Router.init/1","type":"function","doc":"Callback implementation for Plug.init/1."},{"ref":"FootbalInterface.Workflow.html","title":"FootbalInterface.Workflow","type":"behaviour","doc":"Worflows represent the logic that controllers use. They implement the steps that requests need to take to be completed and return answer ready for the controllers to decode. This approach means all controllers will be very skim and easy to follow. Controllers are a detail, the logic should be independent from them. Workflows ensure that happens."},{"ref":"FootbalInterface.Workflow.html#c:run/2","title":"FootbalInterface.Workflow.run/2","type":"callback","doc":"Executes the workflow logic. Returns an tagged :ok tupple, or any, where any takes the form of an :error tagged tuple of arbitrary size. For the possible return values each implementation, see the specs docs of said implementation. Arguments: query: a Map.t containing the query arguments. injected_deps: optional keyword list with dependencies."},{"ref":"FootbalInterface.Workflow.Search.html","title":"FootbalInterface.Workflow.Search","type":"module","doc":"Flow of a search request. Parses the request and queries the DB."},{"ref":"FootbalInterface.Workflow.Search.html#run/2","title":"FootbalInterface.Workflow.Search.run/2","type":"function","doc":"Parses the given map, and queries the DB. For the arguments see c:FootbalInterface.Workflow.run/2 Returns: {:error, :empty_query}: if the request is empty {:error, :invalid_headers, inv_headers}: if the request has invalid headers, such as &quot;Banana&quot; when the CSV does not have a &quot;Banana&quot; column. inv_headers are the headers marked as invalid. {:error, :json_encoding_failed, err}: if enconding the result into JSON failed. err is the error that was raised. {:error, :protobuff_encoding_failed, err}: if enconding the result into protobuff failed. err is the error that was raised. {:error, :invalid_format, inv_format}: if the request asks for an invalid format, such as &quot;oranges&quot;. inv_format is the format requested that cannot be used."}]